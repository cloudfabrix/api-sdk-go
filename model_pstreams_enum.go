/*
CloudFabrix RDA Platform API

CloudFabrix RDA Platform API

API version: 3.2.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cfx_rda_api

import (
	"encoding/json"
	"fmt"
)

// PstreamsEnum An enumeration.
type PstreamsEnum string

// List of pstreams_enum
const (
	COLLECTION_STATUS PstreamsEnum = "collection_status"
	COLLECTION_STATUS PstreamsEnum = "-collection_status"
	DATABASE PstreamsEnum = "database"
	DATABASE PstreamsEnum = "-database"
	DATASTORE_TYPE PstreamsEnum = "datastore_type"
	DATASTORE_TYPE PstreamsEnum = "-datastore_type"
	INDEX_NAME PstreamsEnum = "index_name"
	INDEX_NAME PstreamsEnum = "-index_name"
	NAME PstreamsEnum = "name"
	NAME PstreamsEnum = "-name"
	RETENTION_DAYS PstreamsEnum = "retention_days"
	RETENTION_DAYS PstreamsEnum = "-retention_days"
	SAVED_TIME PstreamsEnum = "saved_time"
	SAVED_TIME PstreamsEnum = "-saved_time"
	SYSTEM_DEFINED PstreamsEnum = "system_defined"
	SYSTEM_DEFINED PstreamsEnum = "-system_defined"
	TIMESTAMP PstreamsEnum = "timestamp"
	TIMESTAMP PstreamsEnum = "-timestamp"
)

// All allowed values of PstreamsEnum enum
var AllowedPstreamsEnumEnumValues = []PstreamsEnum{
	"collection_status",
	"-collection_status",
	"database",
	"-database",
	"datastore_type",
	"-datastore_type",
	"index_name",
	"-index_name",
	"name",
	"-name",
	"retention_days",
	"-retention_days",
	"saved_time",
	"-saved_time",
	"system_defined",
	"-system_defined",
	"timestamp",
	"-timestamp",
}

func (v *PstreamsEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PstreamsEnum(value)
	for _, existing := range AllowedPstreamsEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PstreamsEnum", value)
}

// NewPstreamsEnumFromValue returns a pointer to a valid PstreamsEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPstreamsEnumFromValue(v string) (*PstreamsEnum, error) {
	ev := PstreamsEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PstreamsEnum: valid values are %v", v, AllowedPstreamsEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PstreamsEnum) IsValid() bool {
	for _, existing := range AllowedPstreamsEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to pstreams_enum value
func (v PstreamsEnum) Ptr() *PstreamsEnum {
	return &v
}

type NullablePstreamsEnum struct {
	value *PstreamsEnum
	isSet bool
}

func (v NullablePstreamsEnum) Get() *PstreamsEnum {
	return v.value
}

func (v *NullablePstreamsEnum) Set(val *PstreamsEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePstreamsEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePstreamsEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePstreamsEnum(val *PstreamsEnum) *NullablePstreamsEnum {
	return &NullablePstreamsEnum{value: val, isSet: true}
}

func (v NullablePstreamsEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePstreamsEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

