/*
CloudFabrix RDA Platform API

CloudFabrix RDA Platform API

API version: 3.2.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cfx_rda_api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// DashboardsAPIService DashboardsAPI service
type DashboardsAPIService service

type ApiGetDashboardsRequest struct {
	ctx context.Context
	ApiService *DashboardsAPIService
	cfxqlQuery *string
	search *string
	offset *int32
	limit *int32
	sort *[]DashboardsEnum
}

// &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results
func (r ApiGetDashboardsRequest) CfxqlQuery(cfxqlQuery string) ApiGetDashboardsRequest {
	r.cfxqlQuery = &cfxqlQuery
	return r
}

// search across fields: [&#39;name&#39;, &#39;description&#39;, &#39;usecase&#39;, &#39;category&#39;, &#39;version&#39;]
func (r ApiGetDashboardsRequest) Search(search string) ApiGetDashboardsRequest {
	r.search = &search
	return r
}

// Offset to start the results from.
func (r ApiGetDashboardsRequest) Offset(offset int32) ApiGetDashboardsRequest {
	r.offset = &offset
	return r
}

// Maximum number of results to return
func (r ApiGetDashboardsRequest) Limit(limit int32) ApiGetDashboardsRequest {
	r.limit = &limit
	return r
}

// Sort the output based on given fields
func (r ApiGetDashboardsRequest) Sort(sort []DashboardsEnum) ApiGetDashboardsRequest {
	r.sort = &sort
	return r
}

func (r ApiGetDashboardsRequest) Execute() (*TableReportResponse, *http.Response, error) {
	return r.ApiService.GetDashboardsExecute(r)
}

/*
GetDashboards Fetch meta data for dashboards

Fetch meta data for dashboards

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDashboardsRequest
*/
func (a *DashboardsAPIService) GetDashboards(ctx context.Context) ApiGetDashboardsRequest {
	return ApiGetDashboardsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TableReportResponse
func (a *DashboardsAPIService) GetDashboardsExecute(r ApiGetDashboardsRequest) (*TableReportResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TableReportResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardsAPIService.GetDashboards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/dashboards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cfxqlQuery != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cfxql_query", r.cfxqlQuery, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
