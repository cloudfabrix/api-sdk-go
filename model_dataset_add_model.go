/*
CloudFabrix RDA Platform API

CloudFabrix RDA Platform API

API version: 3.2.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cfx_rda_api

import (
	"encoding/json"
)

// checks if the DatasetAddModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasetAddModel{}

// DatasetAddModel struct for DatasetAddModel
type DatasetAddModel struct {
	Name string `json:"name"`
	Folder *string `json:"folder,omitempty"`
	SchemaName *string `json:"schema_name,omitempty"`
	Tag *string `json:"tag,omitempty"`
}

// NewDatasetAddModel instantiates a new DatasetAddModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasetAddModel(name string) *DatasetAddModel {
	this := DatasetAddModel{}
	this.Name = name
	var folder string = "Default"
	this.Folder = &folder
	return &this
}

// NewDatasetAddModelWithDefaults instantiates a new DatasetAddModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasetAddModelWithDefaults() *DatasetAddModel {
	this := DatasetAddModel{}
	var folder string = "Default"
	this.Folder = &folder
	return &this
}

// GetName returns the Name field value
func (o *DatasetAddModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DatasetAddModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DatasetAddModel) SetName(v string) {
	o.Name = v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *DatasetAddModel) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetAddModel) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *DatasetAddModel) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *DatasetAddModel) SetFolder(v string) {
	o.Folder = &v
}

// GetSchemaName returns the SchemaName field value if set, zero value otherwise.
func (o *DatasetAddModel) GetSchemaName() string {
	if o == nil || IsNil(o.SchemaName) {
		var ret string
		return ret
	}
	return *o.SchemaName
}

// GetSchemaNameOk returns a tuple with the SchemaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetAddModel) GetSchemaNameOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaName) {
		return nil, false
	}
	return o.SchemaName, true
}

// HasSchemaName returns a boolean if a field has been set.
func (o *DatasetAddModel) HasSchemaName() bool {
	if o != nil && !IsNil(o.SchemaName) {
		return true
	}

	return false
}

// SetSchemaName gets a reference to the given string and assigns it to the SchemaName field.
func (o *DatasetAddModel) SetSchemaName(v string) {
	o.SchemaName = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *DatasetAddModel) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetAddModel) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *DatasetAddModel) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *DatasetAddModel) SetTag(v string) {
	o.Tag = &v
}

func (o DatasetAddModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasetAddModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.SchemaName) {
		toSerialize["schema_name"] = o.SchemaName
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	return toSerialize, nil
}

type NullableDatasetAddModel struct {
	value *DatasetAddModel
	isSet bool
}

func (v NullableDatasetAddModel) Get() *DatasetAddModel {
	return v.value
}

func (v *NullableDatasetAddModel) Set(val *DatasetAddModel) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasetAddModel) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasetAddModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasetAddModel(val *DatasetAddModel) *NullableDatasetAddModel {
	return &NullableDatasetAddModel{value: val, isSet: true}
}

func (v NullableDatasetAddModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasetAddModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


