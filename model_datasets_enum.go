/*
CloudFabrix RDA Platform API

CloudFabrix RDA Platform API

API version: 3.2.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cfx_rda_api

import (
	"encoding/json"
	"fmt"
)

// DatasetsEnum An enumeration.
type DatasetsEnum string

// List of datasets_enum
const (
	FOLDER DatasetsEnum = "folder"
	FOLDER DatasetsEnum = "-folder"
	FORMAT DatasetsEnum = "format"
	FORMAT DatasetsEnum = "-format"
	MEM_SIZE_MB DatasetsEnum = "mem_size_mb"
	MEM_SIZE_MB DatasetsEnum = "-mem_size_mb"
	NAME DatasetsEnum = "name"
	NAME DatasetsEnum = "-name"
	NUM_COLUMNS DatasetsEnum = "num_columns"
	NUM_COLUMNS DatasetsEnum = "-num_columns"
	NUM_ROWS DatasetsEnum = "num_rows"
	NUM_ROWS DatasetsEnum = "-num_rows"
	SAVED_TIME DatasetsEnum = "saved_time"
	SAVED_TIME DatasetsEnum = "-saved_time"
	SCHEMA DatasetsEnum = "schema"
	SCHEMA DatasetsEnum = "-schema"
	TIMESTAMP DatasetsEnum = "timestamp"
	TIMESTAMP DatasetsEnum = "-timestamp"
)

// All allowed values of DatasetsEnum enum
var AllowedDatasetsEnumEnumValues = []DatasetsEnum{
	"folder",
	"-folder",
	"format",
	"-format",
	"mem_size_mb",
	"-mem_size_mb",
	"name",
	"-name",
	"num_columns",
	"-num_columns",
	"num_rows",
	"-num_rows",
	"saved_time",
	"-saved_time",
	"schema",
	"-schema",
	"timestamp",
	"-timestamp",
}

func (v *DatasetsEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DatasetsEnum(value)
	for _, existing := range AllowedDatasetsEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DatasetsEnum", value)
}

// NewDatasetsEnumFromValue returns a pointer to a valid DatasetsEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatasetsEnumFromValue(v string) (*DatasetsEnum, error) {
	ev := DatasetsEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatasetsEnum: valid values are %v", v, AllowedDatasetsEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatasetsEnum) IsValid() bool {
	for _, existing := range AllowedDatasetsEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to datasets_enum value
func (v DatasetsEnum) Ptr() *DatasetsEnum {
	return &v
}

type NullableDatasetsEnum struct {
	value *DatasetsEnum
	isSet bool
}

func (v NullableDatasetsEnum) Get() *DatasetsEnum {
	return v.value
}

func (v *NullableDatasetsEnum) Set(val *DatasetsEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasetsEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasetsEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasetsEnum(val *DatasetsEnum) *NullableDatasetsEnum {
	return &NullableDatasetsEnum{value: val, isSet: true}
}

func (v NullableDatasetsEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasetsEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

