/*
CloudFabrix RDA Platform API

CloudFabrix RDA Platform API

API version: 3.2.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cfx_rda_api

import (
	"encoding/json"
	"fmt"
)

// DashboardsEnum An enumeration.
type DashboardsEnum string

// List of dashboards_enum
const (
	CATEGORY DashboardsEnum = "category"
	CATEGORY DashboardsEnum = "-category"
	DESCRIPTION DashboardsEnum = "description"
	DESCRIPTION DashboardsEnum = "-description"
	FOLDER DashboardsEnum = "folder"
	FOLDER DashboardsEnum = "-folder"
	NAME DashboardsEnum = "name"
	NAME DashboardsEnum = "-name"
	SAVED_TIME DashboardsEnum = "saved_time"
	SAVED_TIME DashboardsEnum = "-saved_time"
	TIMESTAMP DashboardsEnum = "timestamp"
	TIMESTAMP DashboardsEnum = "-timestamp"
	USECASE DashboardsEnum = "usecase"
	USECASE DashboardsEnum = "-usecase"
	VERSION DashboardsEnum = "version"
	VERSION DashboardsEnum = "-version"
	VERSIONS_COUNT DashboardsEnum = "versions_count"
	VERSIONS_COUNT DashboardsEnum = "-versions_count"
)

// All allowed values of DashboardsEnum enum
var AllowedDashboardsEnumEnumValues = []DashboardsEnum{
	"category",
	"-category",
	"description",
	"-description",
	"folder",
	"-folder",
	"name",
	"-name",
	"saved_time",
	"-saved_time",
	"timestamp",
	"-timestamp",
	"usecase",
	"-usecase",
	"version",
	"-version",
	"versions_count",
	"-versions_count",
}

func (v *DashboardsEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DashboardsEnum(value)
	for _, existing := range AllowedDashboardsEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DashboardsEnum", value)
}

// NewDashboardsEnumFromValue returns a pointer to a valid DashboardsEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDashboardsEnumFromValue(v string) (*DashboardsEnum, error) {
	ev := DashboardsEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DashboardsEnum: valid values are %v", v, AllowedDashboardsEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DashboardsEnum) IsValid() bool {
	for _, existing := range AllowedDashboardsEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dashboards_enum value
func (v DashboardsEnum) Ptr() *DashboardsEnum {
	return &v
}

type NullableDashboardsEnum struct {
	value *DashboardsEnum
	isSet bool
}

func (v NullableDashboardsEnum) Get() *DashboardsEnum {
	return v.value
}

func (v *NullableDashboardsEnum) Set(val *DashboardsEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardsEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardsEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardsEnum(val *DashboardsEnum) *NullableDashboardsEnum {
	return &NullableDashboardsEnum{value: val, isSet: true}
}

func (v NullableDashboardsEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardsEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

